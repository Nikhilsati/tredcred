{"version":3,"sources":["utils/Processing.js","components/StatsCard.jsx","components/BackDrop.jsx","graphQL/Mutaions.js","components/Modal.jsx","utils/AcceptedFormats.js","App.js","reportWebVitals.js","index.js"],"names":["SSFToDate","serial","utc_days","Math","floor","date_info","Date","fractional_day","total_seconds","getFullYear","getMonth","getDate","processRows","data","totalVendors","validEntries","Set","totalEntries","length","totalAmount","vendors","today","totalValid","map","row","invoiceNo","docNo","docDate","netDueDate","amount","postingDate","type","vendorCode","vendorName","vendorType","filter","has","add","toString","size","useStyles","makeStyles","root","minWidth","maxWidth","title","fontSize","StatsCard","value","classes","Card","className","CardContent","Typography","color","gutterBottom","variant","component","BackDrop","style","width","height","backgroundColor","display","justifyContent","alignItems","position","top","left","zIndex","CircularProgress","ADD_INVOICE","gql","Transition","React","forwardRef","props","ref","Slide","direction","Modal","isOpen","callback","file","useState","setData","rows","setRows","uploading","setUploading","uploaded","setUploaded","message","setMessage","useMutation","addInvoice","useEffect","reader","FileReader","onload","e","a","bstr","target","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","readAsBinaryString","readFile","console","log","handleClose","handleSubmit","setTimeout","Promise","all","invoice","variables","then","catch","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Grid","container","spacing","Object","entries","item","DialogActions","Button","onClick","disabled","SheetJSFT","x","join","App","setFile","setOpen","onDrop","acceptedFiles","useDropzone","getRootProps","getInputProps","isDragActive","accept","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f35f533.chunk.js","sourcesContent":["function SSFToDate(serial) {\r\n   var utc_days  = Math.floor(serial - 25569);\r\n   var utc_value = utc_days * 86400;                                        \r\n   var date_info = new Date(utc_value * 1000);\r\n   var fractional_day = serial - Math.floor(serial) + 0.0000001;\r\n   var total_seconds = Math.floor(86400 * fractional_day);\r\n   var seconds = total_seconds % 60;\r\n   total_seconds -= seconds;\r\n   return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate());\r\n}\r\n\r\nconst processRows = (data) => {\r\n    if(data) {\r\n        let validEntries = new Set();\r\n        let totalEntries = data.length;\r\n        let totalAmount = 0;\r\n        let vendors = new Set();\r\n        let totalVendors = 0;\r\n        let today = new Date()\r\n        data =  data.map( row => ({\r\n            invoiceNo: row[\"Invoice Numbers\"],\r\n            docNo: row[\"Document Number\"],\r\n            docDate: SSFToDate(row[\"Doc. Date\"]),\r\n            netDueDate: SSFToDate(row[\"Net due dt\"]),\r\n            amount: row[\"Amt in loc.cur.\"],\r\n            postingDate: SSFToDate(row[\"Pstng Date\"]),\r\n            type: row[\"Type\"],\r\n            vendorCode: row[\"Vendor Code\"],\r\n            vendorName: row[\"Vendor name\"],\r\n            vendorType: row[\"Vendor type\"]\r\n        })).filter( row => row.docDate <= today && row.netDueDate > today );\r\n        let totalValid = data.length;\r\n\r\n        data = data.filter(row => {\r\n            if(validEntries.has(row.invoiceNo)) {\r\n                return false;\r\n            } \r\n            validEntries.add(row.invoiceNo);\r\n            vendors.add(row.vendorName);\r\n            totalAmount += row.amount;\r\n            row.docDate = row.docDate.toString()\r\n            row.netDueDate = row.netDueDate.toString()\r\n            row.postingDate = row.postingDate.toString()\r\n            return true\r\n        });\r\n        totalVendors = vendors.size;\r\n        let totalDuplicates = totalValid - data.length;\r\n        \r\n        let stats = {\r\n            \"Total Entries\": totalEntries, \r\n            \"Total Valid Entries\": totalValid, \r\n            \"Total Duplicates\": totalDuplicates, \r\n            \"Total Amount\": totalAmount, \r\n            \"Total Vendors\": totalVendors\r\n        }\r\n        return [ data, stats];\r\n    }\r\n    return null\r\n}\r\n\r\n\r\nexport default processRows;\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 150,\r\n    maxWidth: 200\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  }\r\n});\r\n\r\nconst StatsCard = ({title, value}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                {title}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                {value}\r\n                </Typography>\r\n                \r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StatsCard\r\n","import React from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst BackDrop = () => {\r\n    const styles = {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        backgroundColor: '#00000063',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        zIndex: 99999\r\n    }\r\n    return (\r\n        <div style = {styles}>\r\n            <CircularProgress />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackDrop\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ADD_INVOICE = gql`\r\n    mutation AddInvoice($invoice: InvoiceInput!) {\r\n        addInvoice(invoice: $invoice) {\r\n            invoiceNo\r\n        }\r\n    }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport XLSX from 'xlsx';\r\nimport processRows from '../utils/Processing';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport StatsCard from './StatsCard'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport BackDrop from './BackDrop'; \r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_INVOICE } from '../graphQL/Mutaions'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst Modal = ({isOpen, callback, file}) => {\r\n    const [ data, setData ] = useState(null)\r\n    const [ rows, setRows] = useState(null)\r\n    const [uploading, setUploading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n    const [message, setMessage ] = useState('')\r\n    const [addInvoice] = useMutation(ADD_INVOICE);\r\n\r\n    const readFile = () => {\r\n        const reader = new FileReader();            \r\n        reader.onload = async (e) => {\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary', bookVBA: true });\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            await setData(data)\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(file) {\r\n            readFile();\r\n            setMessage(\"\");\r\n            setUploaded(false);\r\n    }\r\n    }, [file])\r\n    \r\n\r\n    useEffect(() => {\r\n        if(rows === null) {\r\n            setRows(processRows(data)? processRows(data): null)\r\n            console.log(rows)\r\n        }\r\n    }, [rows, data])\r\n\tconst handleClose = () => {\r\n        setData(null)\r\n        setRows(null)\r\n        callback()\r\n    };\r\n    \r\n    const handleSubmit = async () => {\r\n        setUploading(true);\r\n        await setTimeout(() => {\r\n            Promise.all(rows[0].map(\r\n                invoice => addInvoice({ variables: {invoice}})\r\n            )).then((result) => {\r\n                setUploaded(true);\r\n                setUploading(false);\r\n                console.log(result)\r\n                setMessage(\"Great All files Uploaded\");\r\n            }).catch(e => {\r\n                setMessage(\"Some Files Failed to Upload, Please Retry\");\r\n                setUploading(false);\r\n            })\r\n        });\r\n        \r\n        \r\n    }\r\n\treturn (\r\n        <Dialog\r\n            open={isOpen}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">Statistics</DialogTitle>\r\n            {\r\n                uploading?<BackDrop />: ''\r\n            }\r\n            <DialogContent>\r\n                    {\r\n                        file && data && rows ?\r\n                        <Grid container spacing={2}>\r\n                            {\r\n                                Object.entries(rows[1]).map(item => <Grid item >\r\n                                    <StatsCard title={item[0]} value={item[1]} />\r\n                                </Grid>)\r\n                            }\r\n                        </Grid>\r\n                        :\r\n                        <CircularProgress />\r\n                    }\r\n                    {\r\n                        message? <p>{message}</p>: ''\r\n                    }\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleSubmit} color=\"primary\" disabled={uploaded}>\r\n                    {uploaded?\"Done\":\"Upload\"}\r\n                </Button>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancle\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\t);\r\n};\r\n\r\nexport default Modal;\r\n","const SheetJSFT = [\r\n\t'xlsx',\r\n\t'xlsb',\r\n\t'xlsm',\r\n\t'xls',\r\n\t'csv',\r\n\t'wb*',\r\n\t'wq*',\r\n].map(x => '.' + x).join(',');\r\n\r\nexport default SheetJSFT","import React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './App.css';\nimport Modal from './components/Modal.jsx'\nimport SheetJSFT from './utils/AcceptedFormats'\n\nfunction App() {\n\n    const [ file, setFile ] = useState(null)\n    const [ open, setOpen ] = useState(false)\n\tconst onDrop = async (acceptedFiles) => {\n        if (acceptedFiles && acceptedFiles[0]) {\n            await setFile(acceptedFiles[0])\n            await setOpen(true)\n        }\n        \n\t\t\n\t};\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div {...getRootProps({ className: 'drop-area' })}>\n\t\t\t\t<input {...getInputProps({ accept: SheetJSFT })} />\n\t\t\t\t{isDragActive ? <h1>Great! You can drop the click now</h1> : <h1>Drop or Upload Your Excel File Here!</h1>}\n\t\t\t</div>\n            <Modal isOpen={open} callback = { () => setOpen(false)} file = {file}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, ApolloLink, gql } from '@apollo/client';\n \nconst client = new ApolloClient({\n  uri: 'https://lpjl5f1yn7.execute-api.us-east-1.amazonaws.com/dev/apollo-lambda-dev-graphql/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}